server:
  port: 8080

spring:
  data:
    redis:
      host: localhost
      port: 6379
      password: "pk2258"
  security:
    oauth2:
      client:
        registration:
          google:
            client-id: 1020400461719-d8lih3vu1hr3su1qaipo36ebov4d8054.apps.googleusercontent.com
            client-secret: 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
            scope: openid, profile, email
            redirect-uri: "http://localhost:8080/login/oauth2/code/google"
        provider:
          google:
            authorization-uri: https://accounts.google.com/o/oauth2/auth
            token-uri: https://oauth2.googleapis.com/token
            user-info-uri: https://openidconnect.googleapis.com/v1/userinfo
            user-name-attribute: sub

  profiles:
    active: dev

  jackson:
    serialization:
      fail-on-empty-beans: false

  # MySQL 연결 정보 (현재 주석 처리됨)
  # datasource:
  #   url: jdbc:mysql://localhost/awsTestDb?useSSL=false&allowPublicKeyRetrieval=true
  #   username: root
  #   password: pk2258
  #   driver-class-name: com.mysql.cj.jdbc.Driver
  #   hikari:
  #     auto-commit: false

  datasource:
    url: jdbc:h2:./db_dev;MODE=MySQL  # ✅ INIT 제거됨
    driverClassName: org.h2.Driver
    username: sa
    password:

  jpa:
    defer-datasource-initialization: true  # ✅ JPA 먼저 실행되고 data.sql 그다음 실행
    hibernate:
      ddl-auto: create-drop                      # ✅ 테이블 자동 생성
      naming:
        physical-strategy: org.hibernate.boot.model.naming.PhysicalNamingStrategyStandardImpl
    properties:
      hibernate:
        show-sql: false
        format_sql: true
    database-platform: org.hibernate.dialect.H2Dialect

  sql:
    init:
      mode: always  # ✅ schema.sql과 data.sql 항상 실행되도록 설정
      continue-on-error: true

  h2:
    console:
      enabled: true
      path: /h2-console
      settings:
        web-allow-others: true
        trace: true

  mail:
    host: smtp.gmail.com
    port: 587
    username: bid.system.info@gmail.com # 이메일 발송에 사용할 Gmail 주소
    password: tskqfpdczojlwfbh # 구글 앱 비밀번호 (2단계 인증시 필요)
    protocol: smtps # 이메일 전송에 사용할 프로토콜 (smtps는 SSL 보안 사용)
    properties:
      mail:
        smtp:
          auth: true
          timeout: 5000
          connectiontimeout: 5000
          writetimeout: 5000
          starttls:
            enable: true

springdoc:
  default-produces-media-type: application/json;charset=UTF-8


